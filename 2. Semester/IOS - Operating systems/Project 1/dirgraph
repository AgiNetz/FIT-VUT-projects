function histogramize ()
{	
	
	if ! read count line; then
		exit 1
	fi
	hashsize=1
	termsize=79
	if [ "0$N" = "0n" ]; then
		if [ "$SIT" = "0" ]; then
			termsize=`tput cols`
		fi
		hashsize=`expr \( $count + \( $termsize - $1 + $2 - 5 \) \) / \( $termsize - $1 + $2 - 4 \)`
	fi 
	i=0
	cur=0
	printf "  %-$1s: " "$line"
	until [ "$i" = "$count" ]
	do
		cur=`expr $cur + 1`
		if [ "$cur" = "$hashsize" ]; then
			printf "#"
			cur=0
		fi
		i=`expr $i + 1`
	done
	printf "\n"
	while read count line
	do
		i=0
        	cur=0
        	printf "  %-$1s: " "$line"
        	until [ "$i" = "$count" ]
        	do
                	cur=`expr $cur + 1`
                	if [ "$cur" = "$hashsize" ]; then
                       		printf "#"
                        	cur=0
                	fi
                	i=`expr $i + 1`
        	done
        	printf "\n"
	done
	return 0
}

function count ()
{
un100=0
un1024=0
un10240=0
un102400=0
un1Mi=0
un10Mi=0
un100Mi=0
un1Gi=0
ov1Gi=0
while read line 
do
if [ $line -lt 100 ]; then
        un100=`expr $un100 + 1`
elif [ $line -lt 1024 ]; then
	un1024=`expr $un1024 + 1`
elif [ $line -lt 10240 ]; then
	un10240=`expr $un10240 + 1`
elif [ $line -lt 102400 ]; then
	un102400=`expr $un102400 + 1`
elif [ $line -lt 1048576 ]; then
	un1Mi=`expr $un1Mi + 1`
elif [ $line -lt 10485760 ]; then
	un10Mi=`expr $un10Mi + 1`
elif [ $line -lt 104857600 ]; then
	un100Mi=`expr $un100Mi + 1`
elif [ $line -lt 1073741824 ]; then
	un1Gi=`expr $un1Gi + 1`
else
	ov1Gi=`expr un1Gi+1`
fi
done
cat <<__END
$un100 0<100 B
$un1024 1<1 KiB
$un10240 2<10 KiB
$un102400 3<100 KiB
$un1Mi 4<1 MiB
$un10Mi 5<10 MiB
$un100Mi 6<100 MiB
$un1Gi 7<1 GiB
$ov1Gi 8>=1 GiB
__END
return 0
}

POSIXLY_CORRECT=yes
IARG="a^"
I=0
N=0
while getopts :i:n curArg; do
case $curArg in
	"i")
		IARG="$OPTARG"
		;;
	"n")
		N="n"
		;;	
	"?")
		printf "Neznamy parameter!\n" >&2
		exit 1
		;;
	":")
		echo "Parameter -i vyzaduje 1 argument!\n" >&2
		exit 2
		;;
esac
done
DIR="."
if [ $# -eq $OPTIND ]; then
	CUR=`pwd`
	eval TMP=\$"$OPTIND"
	cd "$TMP" >&/dev/null || { echo "Zadany adresar $TMP neni validny nebo nemate prava na cteni!" >&2; exit 3; }   
	DIR="$TMP"
elif [ $# -gt $OPTIND ]; then
	printf "Bylo zadano vic argumentu nez se ocekavalo!\n" >&2 && exit 9;
fi
[ -t 1 ]
SIT=$?

FINDPRINT=`find . -printf '%y:%s:%p\n' 2>/dev/null | awk --posix -F/ -v var="$IARG" '{
for(i = 2; i <= NF; i++) {
	if ($i ~ var) {
		next	
	}
}
print
}'` || { printf "Nastala chyba pri prohledavani souboroveho stromu!\n" 
>&2; exit 4; }
ND=`printf "$FINDPRINT" | grep ^[d] | wc -l`
NF=`printf "$FINDPRINT" | grep ^[f] | wc -l`

THIST=`printf "$FINDPRINT" | grep '^[f]' | awk -F: '{printf $3; for (i=4; i<=NF; i++) {printf ":"$i}; printf "\n" }' | file -b -f - | sed -re 's/(.{40})..*$/\1\.\.\./' | sort | uniq -c | sort -g -r | head | sed 's/^[ \t]*//' | histogramize 43 0`


cat <<__END
Root directory: $DIR
Directories: $ND
All files: $NF
File size histogram:
__END
printf "`printf "$FINDPRINT" | grep ^[f] | awk -F: '{ printf $2"\n" }' | count | sort -g -r | histogramize 9 1 | sort -g | cut --complement -b 3`\n"
cat <<__END
File type histogram:
__END
if [ -n "$THIST" ]; then
	printf "${THIST}\n";
fi 
cd "$CUR"
