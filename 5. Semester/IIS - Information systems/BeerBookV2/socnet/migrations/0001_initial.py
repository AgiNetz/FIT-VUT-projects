# Generated by Django 2.1.3 on 2018-12-01 11:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BBUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('identifier', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, primary_key=True, serialize=False, verbose_name='email address')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('gender', models.CharField(max_length=11)),
                ('birthdate', models.DateField(verbose_name='date of birth')),
                ('birthplace', models.CharField(blank=True, max_length=32, null=True)),
                ('residence', models.CharField(blank=True, max_length=32, null=True)),
                ('familystatus', models.CharField(blank=True, max_length=15, null=True)),
                ('education', models.CharField(blank=True, max_length=32, null=True)),
                ('workplace', models.CharField(blank=True, max_length=32, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'usr',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Commentary',
            fields=[
                ('cmnt_id', models.AutoField(primary_key=True, serialize=False)),
                ('contents', models.CharField(max_length=512)),
                ('senton', models.DateTimeField()),
                ('place', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'db_table': 'commentary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('contentid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'content',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('convid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32)),
                ('beginning', models.DateTimeField()),
            ],
            options={
                'db_table': 'conversation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('keywordid', models.AutoField(primary_key=True, serialize=False)),
                ('keyword', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'keyword',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('msg_id', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.CharField(blank=True, max_length=32, null=True)),
                ('contents', models.CharField(max_length=512)),
                ('senton', models.DateTimeField()),
                ('place', models.CharField(blank=True, max_length=32, null=True)),
                ('partof', models.ForeignKey(db_column='partof', on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Conversation')),
                ('sender', models.ForeignKey(db_column='sender', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'message',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Postkeyword',
            fields=[
                ('pk_id', models.AutoField(primary_key=True, serialize=False)),
                ('keyword', models.ForeignKey(db_column='keyword', on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Keyword')),
            ],
            options={
                'db_table': 'postkeyword',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('r_id', models.AutoField(primary_key=True, serialize=False)),
                ('startdate', models.DateField()),
                ('usr1', models.ForeignKey(db_column='usr1', on_delete=django.db.models.deletion.DO_NOTHING, related_name='Usr1', to=settings.AUTH_USER_MODEL)),
                ('usr2', models.ForeignKey(db_column='usr2', on_delete=django.db.models.deletion.DO_NOTHING, related_name='Usr2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'relationship',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Usrconversation',
            fields=[
                ('uc_id', models.AutoField(primary_key=True, serialize=False)),
                ('conversation', models.ForeignKey(db_column='conversation', on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Conversation')),
                ('usr', models.ForeignKey(db_column='usr', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'usrconversation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Usrevent',
            fields=[
                ('ue_id', models.AutoField(primary_key=True, serialize=False)),
                ('usr', models.ForeignKey(db_column='usr', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'usrevent',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Usrphoto',
            fields=[
                ('up_id', models.AutoField(primary_key=True, serialize=False)),
                ('usr', models.ForeignKey(db_column='usr', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'usrphoto',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Usrpost',
            fields=[
                ('up_id', models.AutoField(primary_key=True, serialize=False)),
                ('usr', models.ForeignKey(db_column='usr', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'usrpost',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('albumid', models.OneToOneField(db_column='albumid', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='socnet.Content')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('creationtime', models.DateTimeField()),
                ('creationplace', models.CharField(blank=True, max_length=32, null=True)),
                ('privacy', models.CharField(max_length=9)),
                ('createdby', models.ForeignKey(db_column='createdby', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'album',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('eventid', models.OneToOneField(db_column='eventid', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='socnet.Content')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('creationtime', models.DateTimeField()),
                ('creationplace', models.CharField(blank=True, max_length=32, null=True)),
                ('eventlocation', models.CharField(max_length=64)),
                ('eventtime', models.DateTimeField()),
                ('createdby', models.ForeignKey(db_column='createdby', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'event',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('photoid', models.OneToOneField(db_column='photoid', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='socnet.Content')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('creationtime', models.DateTimeField()),
                ('creationplace', models.CharField(blank=True, max_length=32, null=True)),
                ('captureplace', models.CharField(blank=True, max_length=32, null=True)),
                ('capturedate', models.DateField(blank=True, null=True)),
                ('belongsto', models.ForeignKey(blank=True, db_column='belongsto', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Album')),
                ('createdby', models.ForeignKey(db_column='createdby', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'photo',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('postid', models.OneToOneField(db_column='postid', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='socnet.Content')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('creationtime', models.DateTimeField()),
                ('creationplace', models.CharField(blank=True, max_length=32, null=True)),
                ('contents', models.CharField(max_length=512)),
                ('createdby', models.ForeignKey(db_column='createdby', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='commentary',
            name='containedin',
            field=models.ForeignKey(db_column='containedin', on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Content'),
        ),
        migrations.AddField(
            model_name='commentary',
            name='sender',
            field=models.ForeignKey(db_column='sender', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usrpost',
            name='post',
            field=models.ForeignKey(db_column='post', on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Post'),
        ),
        migrations.AddField(
            model_name='usrphoto',
            name='photo',
            field=models.ForeignKey(db_column='photo', on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Photo'),
        ),
        migrations.AddField(
            model_name='usrevent',
            name='event',
            field=models.ForeignKey(db_column='event', on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Event'),
        ),
        migrations.AlterUniqueTogether(
            name='usrconversation',
            unique_together={('usr', 'conversation')},
        ),
        migrations.AlterUniqueTogether(
            name='relationship',
            unique_together={('usr1', 'usr2')},
        ),
        migrations.AddField(
            model_name='postkeyword',
            name='post',
            field=models.ForeignKey(db_column='post', on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Post'),
        ),
        migrations.AddField(
            model_name='album',
            name='titlephoto',
            field=models.ForeignKey(blank=True, db_column='titlephoto', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='socnet.Photo'),
        ),
        migrations.AlterUniqueTogether(
            name='usrpost',
            unique_together={('usr', 'post')},
        ),
        migrations.AlterUniqueTogether(
            name='usrphoto',
            unique_together={('usr', 'photo')},
        ),
        migrations.AlterUniqueTogether(
            name='usrevent',
            unique_together={('usr', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='postkeyword',
            unique_together={('post', 'keyword')},
        ),
    ]
